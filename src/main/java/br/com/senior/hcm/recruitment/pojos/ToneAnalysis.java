/*
 * Recrutamento e Seleção
 * Serviço do Gestão de Recrutamento e Seleção.
 *
 * OpenAPI spec version: 16.0.2
 * Contact: seniorx-dev@senior.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package br.com.senior.hcm.recruitment.pojos;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import br.com.senior.hcm.recruitment.pojos.EmotionTone;
import br.com.senior.hcm.recruitment.pojos.LanguageTone;
import br.com.senior.hcm.recruitment.pojos.PersonalityModelCandidate;
import java.io.IOException;

/**
 * ToneAnalysis
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-16T19:14:01.468Z")



public class ToneAnalysis {
  @SerializedName("personalityModelCandidate")
  private PersonalityModelCandidate personalityModelCandidate = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("languageTone")
  private LanguageTone languageTone = null;

  @SerializedName("emotionTone")
  private EmotionTone emotionTone = null;

  public ToneAnalysis personalityModelCandidate(PersonalityModelCandidate personalityModelCandidate) {
    this.personalityModelCandidate = personalityModelCandidate;
    return this;
  }

   /**
   * Get personalityModelCandidate
   * @return personalityModelCandidate
  **/
  @ApiModelProperty(value = "")
  public PersonalityModelCandidate getPersonalityModelCandidate() {
    return personalityModelCandidate;
  }

  public void setPersonalityModelCandidate(PersonalityModelCandidate personalityModelCandidate) {
    this.personalityModelCandidate = personalityModelCandidate;
  }

  public ToneAnalysis id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identificador único da entidade.
   * @return id
  **/
  @ApiModelProperty(value = "Identificador único da entidade.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ToneAnalysis languageTone(LanguageTone languageTone) {
    this.languageTone = languageTone;
    return this;
  }

   /**
   * Get languageTone
   * @return languageTone
  **/
  @ApiModelProperty(value = "")
  public LanguageTone getLanguageTone() {
    return languageTone;
  }

  public void setLanguageTone(LanguageTone languageTone) {
    this.languageTone = languageTone;
  }

  public ToneAnalysis emotionTone(EmotionTone emotionTone) {
    this.emotionTone = emotionTone;
    return this;
  }

   /**
   * Get emotionTone
   * @return emotionTone
  **/
  @ApiModelProperty(value = "")
  public EmotionTone getEmotionTone() {
    return emotionTone;
  }

  public void setEmotionTone(EmotionTone emotionTone) {
    this.emotionTone = emotionTone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToneAnalysis toneAnalysis = (ToneAnalysis) o;
    return Objects.equals(this.personalityModelCandidate, toneAnalysis.personalityModelCandidate) &&
        Objects.equals(this.id, toneAnalysis.id) &&
        Objects.equals(this.languageTone, toneAnalysis.languageTone) &&
        Objects.equals(this.emotionTone, toneAnalysis.emotionTone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(personalityModelCandidate, id, languageTone, emotionTone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToneAnalysis {\n");
    
    sb.append("    personalityModelCandidate: ").append(toIndentedString(personalityModelCandidate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    languageTone: ").append(toIndentedString(languageTone)).append("\n");
    sb.append("    emotionTone: ").append(toIndentedString(emotionTone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

